#1)Importing Data
#Do the data have a header containing the variable names?
##Yes
#Are the values for an observation separated by a comma, blank, or tab?
##comma
#Are there any missing vales? If so, how are they codified?
##Yes. Using""
data_types <- c('character','factor','factor','integer','integer','integer','integer','character','double','integer','integer','integer','integer','integer','integer')
nba <- read.csv(datafile,sep=',', colClasses = data_types)
str(nba, vec.len = 1)
nba2 <- read.table(datafile,header=T, sep=',', colClasses = data_types)
str(nba2, vec.len = 1)
identical(nba, nba2)
#2 Technical Questions about importing data
#a)
## It will read the display the first 10 rows of datafile with the headerV1,V2,...,V15,and the first row will be the column name.
#b)
##It will become list
#c)
##Because it doesn't include the separator in the expression which should be sep=',' .
#d)
##The function without speciafying the data type of each column returns the smallest data frame.
#e)
##The data types are turn to the character after being turning into matrix.
#3)
summary(nba$salary)
hist(nba$salary)
nba$salary2 <- nba$salary / 1000000
hist(nba$salary2,xlab='Salary in millions')
hist(log(nba$salary2))
##The distribution looks more symmetric when log(salary2) is between -2 and 4.
nba$low <- as.logical(nba$salary2, (log(nba$salary2)) < -3)
#f)
#g)
#4)
#a)
summary(nba$points)
hist(nba$points)
#b)
#5)
#a)
boxplot(salary2 ~ age, data = nba, xlab = "Age", ylab = "Salary (in millions)")
#Generally the players at the age between 26 and 32 seem to have higher salaries than the players of other age.
#b)
boxplot(points ~ age, data = nba,
xlab = "Age", ylab = "Points")
#The difference in scored points are not large among the players under 32.
#c)
nba$age2 <- nba$age
nba$age2 <- (cut(nba$age2,breaks=c(-Inf,20,24,29,Inf),label = c("20","20-24","25-29","30+")))
summary(nba$age2)
#6)
palette1 <- c("#D4D62A","#4F9D66","#9575AB")
age_colors <- c()
for(i in 1:length(nba$age2)){
if(nba$age2[i]=='20-24')
age_colors[i]<- palette1[1]
if(nba$age2[i]=='25-29')
age_colors[i]<- palette1[2]
if(nba$age2[i]=='30+')
age_colors[i]<- palette1[3]
}
plot(nba$salary ~ nba$points, data = nba, log = "xy", main = "", xlab = "Points (log scale)", ylab = "Salary (log $)", col = age_colors, pch = 19, cex = 0.6)
legend("bottomright", fill = palette1, legend = levels(nba$age2), title = "Age Groups", cex = 0.8)
#7)
#a)
boxplot(nba$salary2 ~ nba$position, data = nba,
xlab = "position", ylab = "Salary (in millions)")
##The players whose position are"C" or "SF" tend to have the relatively high salaries.
#b)
boxplot(nba$points ~ nba$position, data = nba,
xlab = "Position", ylab = "Points")
##The players whose position are"PG" or "SG" tend to have the relatively high scored points.
#c)
palette2 <- c("#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854")
pos_colors <- c()
for(i in 1:length(nba$position)){
if(nba$position[i]=='C')
pos_colors[i]<- palette2[1]
if(nba$position[i]=='PF')
pos_colors[i]<- palette2[2]
if(nba$position[i]=='PG')
pos_colors[i]<- palette2[3]
if(nba$position[i]=='SF')
pos_colors[i]<- palette2[4]
if(nba$position[i]=='SG')
pos_colors[i]<- palette2[5]
}
#d)
plot(nba$salary ~ nba$points, data = nba, log = "xy", main = "", xlab = "Points", ylab = "Salary (log $)", col = pos_colors, pch = 19, cex = 0.6)
legend("bottomright", fill = palette1, legend = levels(nba$position), title = "Position Groups", cex = 0.8)
low <- (log(nba$salary2)<-3)
low <- (log(nba$salary2) < -3 )
sum(low)
lwo
low
nba[low,c('player','weight','height','team','position')]
library(readr)
?read_csv
ggplot(data = filter(dat, team == 'GSW')) +
geom_point(aes(x = height, y = weight)) +
geom_label(aes(x = height, y = weight,label=player))
ggplot(data = gsw) +
geom_point(aes(x = height, y = weight))
summarise(dat, avg_salary = mean(salary))
slice(dat, 1:5)
gt_85 <- filter(dat, height > 85)
three_rows <- slice(dat, 1:3)
library(dplyr)
library(ggplot2)
three_rows <- slice(dat, 1:3)
rdata <- "https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/nba2018-players.csv"
download.file(url = rdata, destfile = '~/Desktop/nba2018-players.csv')
dat <- read.csv('nba2018-players.csv', stringsAsFactors = FALSE)
three_rows <- slice(dat, 1:3)
three_rows
gt_85 <- filter(dat, height > 85)
gt_85
slice(dat, 1:5)
slice(dat, seq(from=10,to=50,by=5))
slice(dat, seq(from=length(player),to=length(player)-5,by=-1))
filter(dat,dat$height<70)
filter(dat, dat$team == 'GSW')
filter(dat, dat$team == 'GSW' & dat$position == 'C')
select(filter(dat,dat$team == 'LAL'), player)
subset(filter(dat,dat$position == 'PG' & dat$team =='GSW'),select = cbind(player,salary))
subset(filter(dat,dat$experience>10 & dat$salary <= 10000000),select = c(player,age,team))
head(subset(filter(dat,dat$experience == 0 & dat$age == 20),select=c(player,team,height,weight)),5)
#Adding new variables: mutate()
gsw <- filter(dat, team == 'GSW')
gsw <- select(gsw, player, height, weight)
gsw <- slice(gsw, c(4, 8, 10, 14, 15))
gsw
mutate(gsw,ht_wt = height/weight)
gsw2 <- mutate(gsw,ht_m=height*0.0254,wt_kg = weight*0.4536)
gsw2
#Reordering rows: arrange()
arrange(gsw, height)
arrange(gsw, desc(height))
arrange(gsw, height, weight)
mutate(gsw,product=height*weight)
gsw3 <- mutate(gsw,log_height=log(height),log_weight=log(weight))
arrange(filter(dat,dat$height<71),height)
subset(head(arrange(dat,desc(salary)),5),select=c(player,team,salary))
subset(head(arrange(dat,desc(points3)),10),select=c(player,team,points3))
gsw_mpg <- mutate(dat,minutes/games)%>%arrange(desc(minutes/games))%>%filter(team=='GSW')%>%select(player,experience,'minutes/games')
gsw_mpg
summarise(dat, avg_salary = mean(salary))
mean(dat$salary)
summarise(
dat,
min = min(salary),
median = median(salary),
avg = mean(salary),
max = max(salary)
)
c(min = min(dat$salary),
median = median(dat$salary),
median = mean(dat$salary),
max = max(dat$salary))
summarise(
group_by(dat, team),
avg_salary = mean(salary)
)
summarise(
group_by(dat, position),
avg_salary = mean(salary)
)
arrange(
summarise(
group_by(dat, position),
avg_height = mean(height),
avg_weight = mean(weight)),
desc(avg_height)
)
summarise(dat,max_height=max(height))
summarise(dat,sd_points3=sd(points3))
summarise(
group_by(dat,team),
median_points3=median(points3)
)
tail(arrange(
summarise(
group_by(dat, team),
avg_points3 = mean(points3),
avg_points3)), n = 5)
group2 <- subset(dat,position=="PF" & experience>=5 & experience <=10,select=c(position,experience,age))
summarise(group2,
avg_age = mean (age),
sd_age = sd(age)
)
ggplot(data = gsw) +
geom_point(aes(x = height, y = weight))
ggplot(data = gsw) +
geom_point(aes(x = height, y = weight))+
geom_text(aes(x = height, y = weight,label=player))
ggplot(data = filter(dat, team == 'GSW')) +
geom_point(aes(x = height, y = weight)) +
geom_label(aes(x = height, y = weight,label=player))
ggplot(data = dat) +
geom_density(aes(x = salary))
ggplot(data = dat) +
geom_histogram(binwidth=50,aes(x = points2))
ggplot(data = dat) +
geom_bar(aes(x = position))
ggplot(data = filter(dat, position == 'C')) +
geom_point(aes(x = experience, y = salary),col='blue')+
geom_smooth(aes(x = experience, y = salary),method =lm)
ggplot(data = filter(dat, position == 'C')) +
geom_point(aes(x = experience, y = salary),col='blue')+
geom_smooth(aes(x = experience, y = salary))
ggplot(data = gsw) +
geom_point(aes(x = height, y = weight))+
geom_text(aes(x = height, y = weight,label=player))
ggplot(data = gsw) +
geom_point(aes(x = height, y = weight))+
geom_text(aes(x = height, y = weight,label=player))
ggplot(data = filter(dat, team == 'GSW')) +
geom_point(aes(x = height, y = weight)) +
geom_label(aes(x = height, y = weight,label=player))
ggplot(data = filter(dat, team == 'GSW')) +
geom_point(aes(x = height, y = weight)) +
geom_label(aes(x = height, y = weight,label=player))
ggplot(data = gsw) +
geom_point(aes(x = height, y = weight))+
geom_text(aes(x = height, y = weight,label=player))
ggplot(data = dat) +
geom_density(aes(x = salary))
ggplot(data = dat) +
geom_histogram(binwidth=50,aes(x = points2))
ggplot(data = dat) +
geom_bar(aes(x = position))
ggplot(data = filter(dat, position == 'C')) +
geom_point(aes(x = experience, y = salary),col='blue')+
geom_smooth(aes(x = experience, y = salary),method =lm)
ggplot(data = filter(dat, position == 'C')) +
geom_point(aes(x = experience, y = salary),col='blue')+
geom_smooth(aes(x = experience, y = salary))
?slice
?filter
?select
?mutate
circle_area() <- function(radius = 1){
if (radius < 0){
stop("len must be positive")
}
area <- pi * r^2
return(area)
}
circle_area() <- function(radius = 1){
if (radius < 0){
stop("len must be positive")
}
area <- pi * radius^2
return(area)
}
circle_area <- function(radius = 1){
if (radius < 0){
stop("len must be positive")
}
area <- pi * radius^2
return(area)
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius must be positive")
}
if (height < 0) {
stop("height must be positive")
}
area <- 2*circle_area(radius) + 2*pi*radius*height
return(area)
}
cylinder_area(1,2)
cylinder_area(2,3)
cylinder_area(radius = -2, height = -1)
cylinder_area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius must be positive")
}
if (height < 0) {
stop("height must be positive")
}
if (height < 0 & radius < 0) {
stop("radius and height must be positive")
}
area <- 2*circle_area(radius) + 2*pi*radius*height
return(area)
}
cylinder_area()
# radius 2, height 3
cylinder_area(radius = 2, height = 3)
# bad radius
cylinder_area(radius = -2, height = 1)
# bad height
cylinder_area(radius = 2, height = -1)
# bad radius and height
cylinder_area(radius = -2, height = -1)
cylinder_area <- function(radius = 1, height = 1) {
if (height < 0 & radius < 0) {
stop("radius and height must be positive")
}
if (radius < 0) {
stop("radius must be positive")
}
if (height < 0) {
stop("height must be positive")
}
area <- 2*circle_area(radius) + 2*pi*radius*height
return(area)
}
# default (radius 1, height 1)
cylinder_area()
# radius 2, height 3
cylinder_area(radius = 2, height = 3)
# bad radius
cylinder_area(radius = -2, height = 1)
# bad height
cylinder_area(radius = 2, height = -1)
# bad radius and height
cylinder_area(radius = -2, height = -1)
# Volume of a cylinder
cylinder_volume <- function(radius = 1, height = 1){
if (radius < 0){
stop("radius must be positive")
}
if (height < 0){
stop("height must be positive")
}
volume <- circle_area(radius) * height
return(volume)
}
#### default (radius 1, height 1)
cylinder_volume()
cylinder_volume(radius = 3, height = 10)
cylinder_volume(height = 10, radius = 3)
??mod
??module
％％
is_even <- function(x) {
if (x%%2 == 0){
print("TRUE")
}else if (x%%2 == 1){
print("FALSE")
}else{
print("NA")
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_even <- function(x) {
if (typeof(x) != numeric){
print("NA")
}else if (x%%2 == 0){
print("TRUE")
}else (x%%2 == 1){
print("FALSE")
}
}
is_even <- function(x) {
if (typeof(x) != numeric){
print("NA")
}else if (x%%2 == 0){
print("TRUE")
}else (x%%2 == 1){
print("FALSE")
}
}
if (typeof(x) != numeric){
print("NA")
}else if (x%%2 == 0){
print("TRUE")
}else (x%%2 == 1){
print("FALSE")
}
is_even <- function(x) {
if (typeof(x) != numeric){
print("NA")
} else if (x%%2 == 0){
print("TRUE")
} else (x%%2 == 1){
print("FALSE")
}
}
is_even <- function(x) {
if (typeof(x) != numeric){
print("NA")
}
}
is_even('a')
typeof('a')
is_even <- function(x) {
if (typeof(x) != 'numeric'){
print("NA")
}
}
is_even('a')
is_even <- function(x) {
if (typeof(x) != 'numeric'){
print("NA")
}else if (x %% 2 == 0){
print("TRUE")
}else{
print("FALSE")
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
typeof(2)
is_even <- function(x) {
if (typeof(x) != 'double'){
print("NA")
}else if (x %% 2 == 0){
print("TRUE")
}else{
print("FALSE")
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
# Odd number
is_odd <- function(x) {
if (typeof(x) != 'double'){
print("NA")
}else if (x %% 2 == 0){
print("FALSE")
}else{
print("TRUE")
}
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
grade <- function(score){
if (score<=100 & score >=90){
grading <- "A"
}else if (score<90 & score>=80){
grading <- "B"
}else if (score<80 & score>=70){
grading <- "C"
}else if (score<70 & score>=60){
grading <- "D"
}else if (score<60){
grading <- "F"
}else if (score<0 | score >100){
stop("score must be a number between 0 and 100")
}
}
### grade "A"
grade(score = 90)
### grade "B"
grade(score = 89.9999)
### grade "C"
grade(score = 70.0000001)
### grade "F"
grade(score = 50)
### grade "A"
grade(score = 90)
### grade "B"
grade(score = 89.9999)
### grade "C"
grade(score = 70.0000001)
### grade "F"
grade(score = 50)
grade <- function(score){
if (score<=100 & score >=90){
grading <- "A"
}else if (score<90 & score>=80){
grading <- "B"
}else if (score<80 & score>=70){
grading <- "C"
}else if (score<70 & score>=60){
grading <- "D"
}else if (score<60){
grading <- "F"
}else if (score<0 | score >100){
stop("score must be a number between 0 and 100")
}
return(grading)
}
### grade "A"
grade(score = 90)
### grade "B"
grade(score = 89.9999)
### grade "C"
grade(score = 70.0000001)
### grade "F"
grade(score = 50)
?fig.align
??fig.align
?{r}
getwd()
setwd("Users/michellehu/desktop/workout01/images")
setwd("/Users/michellehu/desktop/workout01/images")
